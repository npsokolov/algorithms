#include <bits/stdc++.h>

using namespace std;
vector<bool> used;
vector<vector<int>> g;
vector<int> tin,f;
int tim=0;
set<int> a;
void dfs(int v, int last){
    tin[v]=tim++;
    f[v]=tin[v];
    int c=0;
    used[v]=true;
    for (int u : g[v]){
        if (u==last){ continue;}
        if (!used[u]){
            dfs(u,v);
            f[v] = min(f[v], f[u]);
            if (f[u]>=tin[v] && last!=-1){
                a.insert(v);
            }
            ++c;
        }else{
            f[v] = min(f[v], tin[u]);
        }
    }
    if (last==-1 && c>1){
        a.insert(v);
    }

}

int main()
{
    ios_base::sync_with_stdio(false),cin.tie(nullptr);
    //freopen("points.in","r",stdin);
    //freopen("points.out","w",stdout);
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int n,m,u,v;
    cin >> n >> m;
    used.resize(n+1);
    g.resize(n+1);tin.resize(n+1);f.resize(n+1);
    for (int i = 0; i < m; ++i) {
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    for (int i = 1; i <= n; ++i) {
        if (!used[i]){
            dfs(i,-1);
        }
    }
    cout << a.size() << "\n";
    for (auto& x : a) {
        cout << x << "\n";
    }


    return 0;
}

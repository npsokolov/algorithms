#include<bits/stdc++.h>

using namespace std;
#define int long long
struct cord{
    int x,y;
    cord(int x,int y) : x(x), y(y) {}
};
int s = 1e4+19, t = 1e4+20;
const int INF = 1e18;
struct edge{
    int v;
    int u;
    int c;
    int f;
    int cost;
    edge(int v, int u, int c, int f,int cost) : v(v), u(u), c(c), f(f), cost(cost) {}
    inline int gc() const{
        return c-f;
    }
};
int totalFlow = 0;
const int SIZE = 1e4+200;
vector<vector<int>> g(SIZE);
vector<edge> edges;
int n;
int FordBellman(){
    vector<int> dist(SIZE, INF);
    vector<int> from(SIZE,-1);
    dist[s] = 0;
    unordered_set<int> vertices;
    for (int i = 0; i < SIZE; ++i) {
        vertices.emplace(i);
    }
    while (!vertices.empty()){
        unordered_set<int> nvertices;
        for (int v : vertices){
            if (dist[v] == INF) {
                continue;
            }
            for (auto e : g[v]) {
                auto& [ver,u,cap,f,cst] = edges[e];
                if (dist[u]>dist[v] + cst && cap-f>0){
                    nvertices.insert(u);
                    dist[u] = dist[v]+cst;
                    from[u] = e;
                }
            }
        }
        swap(nvertices,vertices);
    }
    if (from[t]==-1){
        return 0;
    }
    int x = t;
    int flow = 1e18;
    int c = 0;
    while (x!=s){
        c+=edges[from[x]].cost;
        flow = min(flow,edges[from[x]].gc());
        x = edges[from[x]].v;
    }
    x = t;
    while (x!=s){
        edges[from[x]].f+=flow;
        edges[from[x]^1].f-=flow;
        x = edges[from[x]].v;
    }
    totalFlow+=flow;
    return (int)flow*(int)c;
}

void MakeEdge(int frm,int to,int cap,int cost,bool isOriented){
    g[frm].emplace_back(edges.size());
    edges.emplace_back(frm,to,cap,0,cost);
    g[to].emplace_back(edges.size());
    edges.emplace_back(to,frm,isOriented ? 0 : cap,0,-cost);
}

void solve(){
    string text;cin >> text;
    cin >> n;
    int cnt = text.size();
    vector<vector<int>> cnts('z'-'a'+1);
    for (int i = 0; i < cnt; ++i) {
        cnts[text[i]-'a'].push_back(i);
    }
    int ss = 1e4+21;
    for (int i = 0; i < n; ++i) {
        string str;int a;
        cin >> str >> a;
        for (char& c : str){
            for (int& l : cnts[c-'a']){
                MakeEdge(cnt,l,1,0,true);
            }
            MakeEdge(ss+i,cnt,1,i+1,true);
            cnt++;
        }
        MakeEdge(s,ss+i,a,0,true);
    }
    for (int i = 0; i < text.size(); ++i) {
        MakeEdge(i,t,1,0,true);
    }
    int x = -1;
    int ans = 0;
    while (x = FordBellman()){
        ans+=x;
    }
    if (totalFlow!=text.size()){
        cout << -1 << endl;
        return;
    }
    cout << ans << endl;
}


signed main(){
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    ios::sync_with_stdio(0);
    cin.tie(0);
    int q = 1;
    //cin >> q;
    while (q--){
        solve();
    }
}

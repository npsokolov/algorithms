#include<bits/stdc++.h>

using namespace std;
#define int long long
#define ld long double
struct cord{
    int x,y;
    cord(int x,int y) : x(x), y(y) {}
};
int s = 1210, t = 1211;
const int INF = 1e18;
struct edge{
    int v;
    int u;
    int c;
    int f;
    ld cost;
    edge(int v, int u, int c, int f,ld cost) : v(v), u(u), c(c), f(f), cost(cost) {}
    inline int gc() const{
        return c-f;
    }
};
int AAA = 0;
vector<vector<int>> g(1e4+300);
vector<edge> edges;
int n;
ld FordBellman(){
    vector<ld> dist(1e4+300, INF);
    vector<int> from(1e4+300,-1);
    dist[s] = 0;
    unordered_set<int> vec;
    for (int i = 0; i < 1e4+300; ++i) {
        vec.emplace(i);
    }
    for (int iteration = 0; iteration < 10; ++iteration) {
        unordered_set<int> nvec;
        for (int v : vec){
        //for (int v = 0; v < 1e4+300; ++v) {
            if (dist[v] == INF) {
                continue;
            }
            for (auto e : g[v]) {
                auto& [ver,u,cap,f,cst] = edges[e];
                if (dist[u]>dist[v] + cst && cap-f>0){
                    nvec.insert(u);
                    dist[u] = dist[v]+cst;
                    from[u] = e;
                }
            }
        }
        swap(nvec,vec);
    }
    if (from[t]==-1){
        return 0;
    }
    int x = t;
    int flow = 1e18;
    ld c = 0;
    while (x!=s){
        c+=edges[from[x]].cost;
        flow = min(flow,edges[from[x]].gc());
        x = edges[from[x]].v;
    }
    x = t;
    while (x!=s){
        edges[from[x]].f+=flow;
        edges[from[x]^1].f-=flow;
        x = edges[from[x]].v;
    }
    AAA+=flow;
    return (ld)flow*(ld)c;
}
ld calc(const cord& c1,const cord& c2){
    return (ld)sqrt((c1.x-c2.x)*(c1.x-c2.x)+(c1.y-c2.y)*(c1.y-c2.y));
}
void solve(){
    cin >> n;
    vector<cord> c;
    for (int i = 0; i < n; ++i) {
        int x,y;
        cin >> x >> y;
        c.emplace_back(x,y);
    }
    std::sort(c.begin(), c.end(),[](const cord& c1, const cord& c2){
        return c1.y>c2.y;
    });
    for (int i = 0; i < n - 1; ++i) {
        for (int j = i+1; j < n; ++j) {
            if (c[i].y!=c[j].y){
                g[3*i+2].emplace_back(edges.size());
                edges.emplace_back(3*i+2,3*j,1,0,calc(c[i],c[j]));
                g[3*j].emplace_back(edges.size());
                edges.emplace_back(3*j,3*i+2,0,0,-calc(c[i],c[j]));
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        g[3*i+1].emplace_back(edges.size());
        edges.emplace_back(3*i+1,3*i+2,2,0,0);
        g[3*i+2].emplace_back(edges.size());
        edges.emplace_back(3*i+2,3*i+1,0,0,0);
    }
    for (int i = 0; i < n; ++i) {
        g[3*i].emplace_back(edges.size());
        edges.emplace_back(3*i,t,1,0,0);
        g[t].emplace_back(edges.size());
        edges.emplace_back(t,3*i,0,0,0);
    }

    for (int i = 0; i < n; ++i) {
        g[s].emplace_back(edges.size());
        edges.emplace_back(s,3*i+1,1e18,0,0);
        g[3*i+1].emplace_back(edges.size());
        edges.emplace_back(3*i+1,s,0,0,0);
    }




    cout.precision(15);
    ld x = -1;
    ld ans = 0;
    while (abs(x)>1e-6){
        x = FordBellman();
        ans+=x;
    }
    if (AAA!=n-1){
        cout << -1 << endl;
        return;
    }
    cout << ans << endl;
}


signed main(){
	freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
	ios::sync_with_stdio(0);
    cin.tie(0);
    int q = 1;
    //cin >> q;
    while (q--){
        solve();
    }
}

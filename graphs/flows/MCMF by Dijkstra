#include <iostream>
#include <map>
#include <vector>
#include <unordered_set>
#include <cstring>
#include <set>
#include <algorithm>
#include <queue>

using namespace std;
#define int long long
int s = 1e4+19, t = 1e4+20;
const int INF = 1e14;
const int SIZE = 1e4+200;
struct edge{
    int v;
    int u;
    int c;
    int f;
    int cost;
    edge(int v, int u, int c, int f,int cost) : v(v), u(u), c(c), f(f), cost(cost) {}
    inline int gc() const{
        return c-f;
    }
};
int totalFlow = 0;
vector<vector<int>> g(SIZE);
vector<edge> edges;
int n;
vector<int> p(SIZE, INF);
void FordBellman(){
    p[s] = 0;
    unordered_set<int> vertices;
    for (int i = 0; i < SIZE; ++i) {
        vertices.emplace(i);
    }
    while (!vertices.empty()){
        unordered_set<int> updatedVertices;
        for (int v : vertices){
            if (p[v] == INF) {
                continue;
            }
            for (auto e : g[v]) {
                auto& [ver,u,cap,f,cst] = edges[e];
                if (p[u]>p[v] + cst && cap-f>0){
                    p[u] = p[v]+cst;
                    updatedVertices.emplace(u);
                }
            }
        }
        swap(vertices,updatedVertices);
    }
}
vector<int> from;
vector<bool> usedFlow;
void LetFlow(int v){
    if (usedFlow[v]) return;
    if (v==t){
        return;
    }
    usedFlow[v] = true;
    for (auto e : g[v]){
        auto& [ver,u,cap,f,cst] = edges[e];
        if (cap-f<=0 || usedFlow[u]) continue;
        int w = cst + p[v] - p[u];
        if (w==0){
            from[u] = e;
            LetFlow(u);
        }
    }
}
int Dijkstra(){
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<>> q;
    vector<int> dist(SIZE,INF);
    vector<bool> used(SIZE,false);
    from.assign(SIZE,-1);
    usedFlow.assign(SIZE,false);
    q.emplace(0,s);
    dist[s] = 0;
    LetFlow(s);
    if (from[t]==-1){
        return 0;
    }
    int x = t;
    int flow = 1e18;
    int c = 0;
    while (x!=s){
        c+=edges[from[x]].cost;
        flow = min(flow,edges[from[x]].gc());
        x = edges[from[x]].v;
    }
    x = t;
    while (x!=s){
        edges[from[x]].f+=flow;
        edges[from[x]^1].f-=flow;
        x = edges[from[x]].v;
    }
    totalFlow+=flow;
    while (!q.empty()){
        auto [w,v] = q.top();
        q.pop();
        if (used[v]){
            continue;
        }
        used[v] = true;
        for (int e : g[v]){
            auto& [ver,u,cap,f,cst] = edges[e];
            int w1 = dist[v] + cst + p[v] - p[u];
            if (cap-f>0 && w1<0){
                throw runtime_error("=========LOL==========");
            }
            if (dist[u]>w1 && cap-f>0){
                dist[u] = w1;
                q.emplace(w1,u);
            }
        }
    }
    for (int i = 0; i < SIZE; ++i) {
        p[i]+=dist[i];
    }
    return flow*c;
}
void MakeEdge(int frm,int to,int cap,int cost,bool isOriented){
    g[frm].emplace_back(edges.size());
    edges.emplace_back(frm,to,cap,0,cost);
    g[to].emplace_back(edges.size());
    edges.emplace_back(to,frm,isOriented ? 0 : cap,0,-cost);
}
void solve(){
    string text;cin >> text;
    cin >> n;
    int cnt = text.size();
    vector<vector<int>> cnts('z'-'a'+1);
    for (int i = 0; i < cnt; ++i) {
        cnts[text[i]-'a'].push_back(i);
    }
    int ss = 1e4+21;
    for (int i = 0; i < n; ++i) {
        string str;int a;
        cin >> str >> a;
        for (char& c : str){
            for (int& l : cnts[c-'a']){
                MakeEdge(cnt,l,1,0,true);
            }
            MakeEdge(ss+i,cnt,1,i+1,true);
            cnt++;
        }
        MakeEdge(s,ss+i,a,0,true);
    }
    for (int i = 0; i < text.size(); ++i) {
        MakeEdge(i,t,1,0,true);
    }
    int x = -1;
    int ans = 0;
    FordBellman();
    while (x = Dijkstra()){
        ans+=x;
    }
    if (totalFlow!=text.size()){
        cout << -1 << endl;
        return;
    }
    cout << ans << endl;
}
signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int qq = 1;
    //cin >> qq;
    while (qq--) {
        solve();
    }
    cout.flush();
}

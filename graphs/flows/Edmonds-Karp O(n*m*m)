#include <bits/stdc++.h>
#define int long long

using namespace std;
struct edge{
    int v;
    int u;
    int c;
    int f;
    edge(int v,int u, int c, int f) : v(v), u(u), c(c), f(f) {}
    inline int gc() const{
        return c-f;
    }
};
const int SIZE = 1e4;
vector<vector<int>> g(SIZE);
vector<edge> edges;
int n,m;
int s;
int t;
vector<int> used(SIZE,-1);
int timer = 0;
int bfs(int v = s, int mnCap = 1e18){
    queue<pair<int,int>> q;
    vector<int> par(SIZE,-1);
    q.emplace(v,mnCap);
    used[v] = timer;
    while (!q.empty()){
        auto [u,cap] = q.front();
        if (u==t){
            auto p = par[u];
            while (p!=-1ll){
                edges[p].f+=cap;
                edges[p^1].f-=cap;
                p = par[edges[p].v];
            }
            return cap;
        }
        q.pop();
        for (int num : g[u]){
            int k = edges[num].u;
            if (used[k]==timer || edges[num].gc()==0){
                continue;
            }
            par[k] = num;
            used[k] = timer;
            q.emplace(k,min(cap,edges[num].gc()));
        }
    }
    return 0;
}

void MakeEdge(int frm,int to,int cap,bool isOriented = true){
    g[frm].emplace_back(edges.size());
    edges.emplace_back(frm,to,cap,0);
    g[to].emplace_back(edges.size());
    edges.emplace_back(to,frm,isOriented ? 0 : cap,0);
}


void solve() {
    cin >> n >> m;
    s = 1;
    t = n;
    for (int i = 0; i < m; ++i) {
        int v,u,c;
        cin >> v >> u >> c;
        MakeEdge(v,u,c,false);
    }
    int ans = 0;
    int x;
    while (x = bfs()) {
        ans+=x;
        timer++;
    }
    cout << ans << "\n";
}


signed main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int q = 1;
    //cin >> q;
    while (q--) {
        solve();
    }

    cout.flush();
}

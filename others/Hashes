//#pragma GCC optimize("O3,unroll-loops")
//#pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")
//#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<fstream>
#include<vector>
#include<stack>
#include<queue>
#include<set>
#include<map>
#include<array>
#include<unordered_set>
#include<unordered_map>
#include<cstring>
#include<string>
#include<memory>
#include<iomanip>
#include<cassert>
#include<cmath>
#include<random>
#include<algorithm>
#include<chrono>

using namespace std;
#define endl '\n'
#define int long long
#define ld long double

constexpr int N = 200005;
constexpr array<int, 2> p = { 2357, 23557 }, md = { 998244353 , 1000000007 };
array<int, 2> pw[N];

void precalc() {
  pw[0] = { 1, 1 };
  for (int i = 1; i < N; i++) {
    for (int d = 0; d < 2; d++) {
      pw[i][d] = pw[i - 1][d] * p[d] % md[d];
    }
  }
}

vector<array<int, 2>> gen_hash(const string& s) {
  int n = s.size();
  vector<array<int, 2>> h(n + 1);
  h[0] = { 0, 0 };
  for (int i = 0; i < n; i++) {
    for (int d = 0; d < 2; d++) {
      h[i + 1][d] = (h[i][d] + s[i] * pw[i][d]) % md[d];
    }
  }

  return h;
}

int binpow(int a, int b,int m){
    int ans = 1;
    while (b){
        if (b&1) (ans=(ans*a)%m);
        a=(a*a)%m;
        b>>=1;
    }
    return ans;
}


void solve(){

}


signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif // ONLINE_JUDGE
    precalc();
    int q = 1; cin >> q; while (q--)
        solve();
    return 0;
}

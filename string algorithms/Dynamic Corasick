#include <bits/stdc++.h>
using namespace std;
const int MAXLOGN = 20;
const int NUL = -1;
template<std::size_t A_SIZE, std::size_t FIRST_SYMBOL>
class Trie{
public:
    int numOfStrings;
    vector<string> strs;
    struct Node{
        int link; // max own suffix of string that we have when we are going to trie[v]
        int nextTerm; //link to the closest term vertex
        int parent; // our parent
        int symbol; //we used to come to this v
        //unordered_map<int,int> next; // casual go
        int next[26];
        int go[26];
        //vector<int> go; // where we should go in order to make our algorithm determined
        int term; // ends of strings
        Node() : nextTerm(0),term(0),link(0),parent(0),symbol(0) {
            for (int i = 0; i < A_SIZE; ++i) {
                next[i]=NUL;
                go[i]=0;
            }
        }
    };
    static int getInt(int c){
        return c - FIRST_SYMBOL;
    }
    vector<Node> trie;
public:
    Trie() {
        trie.emplace_back();
        numOfStrings = 0;
    }
    void add(const string& s){
        strs.emplace_back(s);
        int cur = 0;
        int deep = 0;
        for(auto& c: s){
            int id = getInt(c);
            //if(trie[cur].next.find(id)==trie[cur].next.end()){
            if (trie[cur].next[id]==NUL){
                trie[cur].next[id] = trie.size();
                trie.emplace_back();
                trie.back().parent = cur;
                trie.back().symbol = id;
            }
            cur = trie[cur].next[id];
            deep++;
        }
        trie[cur].term++;
        numOfStrings++;
    }
    void build(){
        queue<int> q;
        for (int i = 0; i < A_SIZE; ++i) {
            //if (trie[0].next.find(i)!=trie[0].next.end()){
            if (trie[0].next[i]!=NUL){
                trie[0].go[i]=trie[0].next[i];
                q.emplace(trie[0].go[i]);
            }else{
                trie[0].go[i]= 0;
            }
        }
        while(!q.empty()){
            int v = q.front();
            if (v==7){
                int g =2345;
            }
            q.pop();
            if (trie[v].parent==0){
                trie[v].link = 0;
            }else{
                trie[v].link = trie[trie[trie[v].parent].link].go[trie[v].symbol];
            }
            if (trie[trie[v].link].term){
                trie[v].nextTerm = trie[v].link;
            }else{
                trie[v].nextTerm = trie[trie[v].link].nextTerm;
            }
            for (int i = 0; i < A_SIZE; ++i) {
                if (trie[v].next[i]!=NUL){
                    //if (trie[v].next.find(i)!=trie[v].next.end()){
                    trie[v].go[i] = trie[v].next[i];
                    q.push(trie[v].next[i]);
                }else{
                    trie[v].go[i]=trie[trie[v].link].go[i];
                }
            }
        }
    }

    int work(const string& text){
        int cur = 0;
        int ans = 0;
        int cnt = 0;
        for (auto c : text){
            int id = getInt(c);
            int v = trie[cur].go[id];
            for (int u = v;u!=0 && u!=NUL;u=trie[u].nextTerm){
                ans+=trie[u].term;
            }
            cur=v;
            cnt++;
        }
        return ans;
    }
};

void add(vector<Trie<26,'a'>>& vec, const string& s){
    vector<string> toBePushed;
    for (int i = 0; i < MAXLOGN; ++i) {
        if (vec[i].numOfStrings==(1<<i)){
            for (const string& str : vec[i].strs){
                toBePushed.push_back(str);
            }
            vec[i] = Trie<26,'a'>();
        }else{
            vec[i].add(s);
            for (string& str : toBePushed) {
                vec[i].add(str);
            }
            vec[i].build();
            break;
        }
    }
}

int calc(vector<Trie<26,'a'>>& vec,const string& s){
    int ans = 0;
    for (int i = 0; i < MAXLOGN; ++i) {
        if (vec[i].numOfStrings!=0) {
            ans += vec[i].work(s);
        }
    }
    return ans;
}

signed main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int n,m;
    cin >> n;
    vector<Trie<26,'a'>> vec(MAXLOGN+1);
    vector<Trie<26,'a'>> vecDeleted(MAXLOGN+1);
    for (int i = 0; i < n; ++i) {
        int x;string s;
        cin >> x >> s;
        if (x==1){
            add(vec,s);
        }else if (x==2){
            add(vecDeleted,s);
        }else{
            cout << calc(vec,s) - calc(vecDeleted,s) << endl;
        }
    }
    cout.flush();
    return 0;
}
